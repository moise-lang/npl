/*
   Normative Programming Language (NPL)
   gradle build file

*/

plugins {
  id "ca.coglinc.javacc" version "2.4.0"
  // see https://github.com/johnmartel/javaccPlugin
}

defaultTasks 'jar'

apply plugin: 'java-library'
apply plugin: 'maven-publish'

version '0.6-SNAPSHOT'
group   'org.jacamo'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven { url "https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master" }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

dependencies {
    api('io.github.jason-lang:jason-interpreter:3.2.2') {
       exclude group: 'net.sf.ingenias', module: 'jade'
    }
    testImplementation('junit:junit:4.13.1')

    implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/generated/javacc'
            srcDir 'examples'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

jar {
    //archiveBaseName 'npl'

    // exclude files from example
    exclude('*.class')
    exclude('*.npl')
}

clean {
    delete 'bin'
    delete 'build'
}


task example0 (type: JavaExec, dependsOn: classes) {
    mainClass = 'Example0'
    classpath sourceSets.main.runtimeClasspath
}

task example1 (type: JavaExec, dependsOn: classes) {
    mainClass = 'Example1'
    classpath sourceSets.main.runtimeClasspath
}

task example2 (type: JavaExec, dependsOn: classes) {
    mainClass = 'Example2'
    classpath sourceSets.main.runtimeClasspath
}

task example3 (type: JavaExec, dependsOn: classes) {
    mainClass = 'Example3'
    classpath sourceSets.main.runtimeClasspath
}

task example4 (type: JavaExec, dependsOn: classes) {
    mainClass = 'Example4'
    classpath sourceSets.main.runtimeClasspath
}

/*task javadoc(overwrite: true, dependsOn: compileJava) {
    setDescription('Generates Javadoc API documentation with UMLGraph diagrams')
    setGroup(JavaBasePlugin.DOCUMENTATION_GROUP)

    doLast {
        ant.javadoc(classpath: (configurations.runtime + configurations.compile).asPath,
                    sourcepath: file('src/main/java'),
                    packagenames: '*',
                    destdir: "${docsDir}/../../doc/api",
                    private: 'true',
                    docletpath: configurations.umljavadoc.asPath) {
            doclet(name: 'org.umlgraph.doclet.UmlGraphDoc') {
                param(name: '-inferrel')
                param(name: '-inferdep')
                param(name: '-qualify')
                //param(name: '-T', value: 'svg')
                param(name: '-postfixpackage')
                param(name: '-hide', value: 'java.*')
                //param(name: '-collpackages', value: 'java.util.*')
                //param(name: '-nodefontsize', value: '9')
                //param(name: '-nodefontpackagesize', value: '7')
                //param(name: '-link', value: 'http://java.sun.com/j2se/1.5.0/docs/guide/javadoc/doclet/spec')
                //param(name: '-link', value: 'http://java.sun.com/j2se/1.5/docs/api')
            }
        }
    }
}*/

// task javadocJar (type: Jar, dependsOn: javadoc) {
//     // baseName 'npl'
//     classifier = 'javadoc'
//     from '${docsDir}/../../doc/api'
// }

// task sourceJar (type : Jar) {
//     // baseName 'npl'
//     classifier = 'sources'
//     from sourceSets.main.allSource
// }

artifacts {
    archives jar //, sourceJar, javadocJar
}


publishing {
    publications {
        maven(MavenPublication) {
            from components.java
			// artifact sourceJar
			// artifact javadocJar

            artifactId 'npl'
        }
    }
}

/*
eclipse {
    classpath {
        downloadJavadoc = true
        file.whenMerged { cp ->
            cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder('build/generated/javacc', null) )
        }
        file.whenMerged { cp ->
	        logger.lifecycle "Removing duplicate classpath entries from eclipse for project '${project.name}'"

	        Map entryByPath = cp.entries.groupBy { entry -> entry.path }
	        entryByPath.each { key, values ->
	          if (values.size() > 1) {
	            def entry = values.first()
	            if (entry.kind == 'src') {
	              entry.includes = []
	              entry.excludes = []
	            }
	            int index = cp.entries.indexOf entry
	            logger.lifecycle "Removing ${values.collect { it.path }}"
	            cp.entries.removeAll values
	            logger.lifecycle "Adding ${entry.path}"
	            cp.entries.add index, entry
	          }
	        }
	   }
    }
}
*/

compileJavacc {
    inputDirectory = file('src/main/javacc')
    outputDirectory = file(project.buildDir.absolutePath + '/generated/javacc/npl/parser')
}


jjdoc {
    outputDirectory = file(project.projectDir.absolutePath + '/doc')
    //arguments = [text: 'true']
}

// transfer local maven artifact to our maven2 repository at sourceforge
/*task publishMavenSF(dependsOn: [ 'build', 'publishToMavenLocal']) {
  doLast {
    def wdir = System.getProperty("user.home")+'/.m2/repository/org/jacamo/npl'
    def tdir = 'jomifred,jacamo@web.sf.net:/home/project-web/jacamo/htdocs/maven2/org/jacamo/npl'
    exec {
        commandLine 'scp', '-r', project.version, tdir
        workingDir wdir
    }
    exec {
        commandLine 'cp', 'maven-metadata-local.xml', 'maven-metadata.xml'
        workingDir wdir
    }
    exec {
        commandLine 'scp', 'maven-metadata.xml', tdir
        workingDir wdir
    }
  }
}*/

// Builds the distribution, documentation and a new release
task release(dependsOn: [ 'build', 'jjdoc', 'javadoc', 'fixTab', 'zipRel']) {
}

task fixTab {
    ant.fixcrlf(eol: 'lf',  includes: '**/*.txt,**/*.bat, **/*.adoc', srcdir: '.')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml', srcdir: 'src')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '*.gradle', srcdir: '.')
}

// copy files used to build a release
task copyRel {
  doLast {
    copy {
        from '.'
        into 'build/npl-'+project.version
        include '*.adoc'
        include 'LICENSE'
        include 'scripts/**'
    }
    copy {
        from libsDir
        from configurations.runtime
        into 'build/npl-'+project.version+'/'+libsDirName
        include '**/*.jar'
    }
    copy {
        from 'doc'
        into 'build/npl-'+project.version+'/doc'
    }
    copy {
        from 'examples'
        into 'build/npl-'+project.version+'/examples'
    }
  }
}

// creates a zip file for a release
task zipRel(type: Zip, dependsOn: copyRel) {
    from 'build/npl-'+project.version
    // baseName 'npl'
}

task publishMavenGitHub(dependsOn: [ 'build', 'publishToMavenLocal']) {
  group "publishing"
  doLast {
    def wdir = System.getProperty("user.home")+'/.m2/repository/org/jacamo/npl'
    def rdir = '../jacamo-mvn-repo'
    exec {
        commandLine 'git', 'pull'
        workingDir rdir
    }
    copy {
        from wdir
        into rdir + '/org/jacamo/npl'
    }
    exec {
        commandLine 'git', 'add', '*'
        workingDir rdir
    }
    exec {
        commandLine 'git', 'commit', '-a', '-m', 'new version of NPL '+project.version
        workingDir rdir
    }
    exec {
        commandLine 'git', 'push'
        workingDir rdir
    }
  }
}
