// Grammar for Normative Programming Language

options {
   FORCE_LA_CHECK=true;
   STATIC=false;
   IGNORE_CASE=false;
   UNICODE_INPUT=true;
}

PARSER_BEGIN(nplp) // NPL parser

  package npl.parser;

  import npl.*;
  import jason.asSyntax.*;
  import jason.asSyntax.ArithExpr.ArithmeticOp;
  import jason.asSyntax.LogExpr.LogicalOp;
  import jason.asSyntax.RelExpr.RelationalOp;
  import jason.asSemantics.*;

  import java.util.*;

  public class nplp {
    private String npSource = null;
    private DynamicFactsProvider dfp;
    private static LiteralFactory lFac = NPLLiteral.getFactory();
    private static INPLFactory    nFac = new NPLFactory();

    public static void setLiteralFactory(LiteralFactory l) {
        lFac = l;
    }
    public static void setNPLFactory(INPLFactory l) {
        nFac = l;
    }
    public void setDFP(DynamicFactsProvider dfp) {
        this.dfp = dfp;
    }

    private String getSourceRef(SourceInfo s) {
        if (s == null)
            return "[]";
        else
            return "["+s.getSrcFile()+":"+s.getBeginSrcLine()+"]";
    }
    private String getSourceRef(DefaultTerm t) {
        return getSourceRef( t.getSrcInfo());
    }
    private String getSourceRef(Object t) {
        if (t instanceof DefaultTerm)
            return getSourceRef((DefaultTerm)t);
        else if (t instanceof SourceInfo)
            return getSourceRef((SourceInfo)t);
        else
            return "[]";
    }
    private Term changeToAtom(Object o) {
        Term u = (Term)o;
        if (u == Literal.LTrue)
            return u;
        if (u == Literal.LFalse)
            return u;
        if (u.toString().equals("true"))
            return Literal.LTrue;
        if (u.toString().equals("false"))
            return Literal.LFalse;
        if (u.isAtom()) {
           return new Atom((Literal)u);
        } else {
           return u;
        }
    }

  }
PARSER_END(nplp)

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")? >
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}


TOKEN : {   // Note: i do not know why, but vars must be defined before TK_BEGIN and END
  <VAR : (<UP_LETTER> (<CHAR>)*) >
}

TOKEN : {
// Predefined
  <TK_NOT:    "not">
| <TK_LABEL_AT: "@"> // special chars
| <TK_INTDIV: "div">
| <TK_INTMOD: "mod">

// Numbers
|  <NUMBER: ["0"-"9"] (["0"-"9"])*
          | (["0"-"9"])* "." (["0"-"9"])+ (<EXPONENT>)?
          | (["0"-"9"])+ <EXPONENT> >
|  <EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>

// Strings
|  <STRING: "\"" ( ~["\"","\\","\n","\r"]
                 | "\\" ( ["n","t","b","r","f","\\","\'","\""]
                        | ["0"-"7"] (["0"-"7"])?
                        | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">

// Identifiers
|  <NP        : "np">
|  <SCOPE     : "scope">
|  <NORM      : "norm">
|  <SANCTION  : "sanction">
|  <FAIL      : "fail">
|  <IF        : "if">
|  <FULFILLED   : "fulfilled">
|  <UNFULFILLED : "unfulfilled">
|  <INACTIVE    : "inactive">
|  <OBLIGATION  : "obligation">
|  <PERMISSION  : "permission">
|  <PROHIBITION : "prohibition">
|  <ATOM      : (<LC_LETTER> | "." <CHAR>) (<CHAR> | "." <CHAR>)*>
|  <UNNAMEDVAR: ("_" (<CHAR>)*) >
|  <CHAR      : (<LETTER> | <DIGIT> | "_")>
|  <LETTER    : ( <LC_LETTER> | <UP_LETTER> )>
|  <LC_LETTER : ["a"-"z"]>
|  <UP_LETTER : ["A"-"Z"]>
|  <DIGIT     : ["0"-"9"]>
}


void program(NormativeProgram np, DynamicFactsProvider dfp) throws Exception :
{ Token k; }

{                               { this.dfp  = dfp;
                                }
  scope(np, null)
  <EOF>
}


void scope(NormativeProgram np, Scope superScope) throws Exception :
{ Literal scopeId; Rule ir; INorm n; Scope scope; ISanctionRule sr; }
{ <SCOPE> scopeId = literal()
                              { scope = new Scope(scopeId, np);
                                if (superScope == null) { // it is root
                                  np.setRoot(scope);
                                } else {
                                  superScope.addScope(scope);
                                  scope.setFather(superScope);
                                }
                              }
  "{"
  (
    n = norm() "."             { scope.addNorm(n); }
  | ir = inference_rule() "."  { scope.addInferenceRule(ir); }
  | sr = sanction_rule() "."   { scope.addSanctionRule(sr); }
  | scope(np,scope)
  )*
  "}"
}

Rule inference_rule() :
{ Literal h; Object b = Literal.LTrue; }
{ h = literal() [ ":-" b = log_expr() ]
                              { return new Rule(h,(LogicalFormula)b); }
}

INorm norm() :
{ Literal h; Object b; Token id; INorm n; }
{ <NORM> id = <ATOM> ":"
  b = log_expr()
  "->"
  ( h = fail() | h = deontic_operator() )
                       {
                         if (b.toString().equals("true"))  b = Literal.LTrue;
                         if (b.toString().equals("false")) b = Literal.LFalse;
                         n = nFac.createNorm(id.image,h,(LogicalFormula)b);
                       }
  ( <IF>
      (
          (<FULFILLED> ":"
             h = literal()        { n.addFulfilledSanction(h); }
             ( "," h = literal()  { n.addFulfilledSanction(h); }
             )*
          )
          |
          ( <UNFULFILLED> ":"
             h = literal()        { n.addUnfulfilledSanction(h); }
             ( "," h = literal()  { n.addUnfulfilledSanction(h); }
             )*
          )
          |
          ( <INACTIVE> ":"
             h = literal()        { n.addInactiveSanction(h); }
             ( "," h = literal()  { n.addInactiveSanction(h); }
             )*
          )
      )
  )*

                       { return n; }
}

ISanctionRule sanction_rule() :
{ Literal h; Object b = null; Token id; Term t; List args = new ArrayList(); }
{ <SANCTION> id = <ATOM>
  [ "("
       t = var()       { args.add(t); }
       ( "," t = var() { args.add(t); }
       )*
     ")"
  ]
  [ ":"
    b = log_expr()
  ]
  "->"
  h = literal()
                       {
                         return nFac.createSanctionRule(id.image,args,(LogicalFormula)b,h);
                       }
}

Literal fail() :
{ Token k; Term t = null; Literal r; }
{
   k = <FAIL>
   "("
   t = term()
   ")"
                       { r = ASSyntax.createLiteral(NormativeProgram.FailFunctor, t);
                         r.setSrcInfo(new SourceInfo(npSource, k.beginLine));
                         if (dfp != null) { // && dfp.isRelevant(r.getPredicateIndicator())) {
                            return lFac.createNPLLiteral(r,dfp);
                         } else {
                            return r;
                         }
                       }
}

Literal deontic_operator() :
{ Token k; Term a, m, g, d = null; Literal r; Object o; }
{
   ( k = <OBLIGATION>  { r = ASSyntax.createLiteral(NormativeProgram.OblFunctor); }
   | k = <PERMISSION>  { r = ASSyntax.createLiteral(NormativeProgram.PerFunctor); }
   | k = <PROHIBITION> { r = ASSyntax.createLiteral(NormativeProgram.ProFunctor); }
   )                   { r.setSrcInfo(new SourceInfo(npSource, k.beginLine)); }
   "("
   ( k=<ATOM>          { r.addTerm(new Atom(k.image)); }
   | k=<VAR>           { r.addTerm(new VarTerm(k.image)); }
   ) ","
   o = log_expr() ","  { r.addTerm( changeToAtom(o) ); }
   o = log_expr() ","  { r.addTerm( changeToAtom(o) ); }
   o = log_expr()      { r.addTerm( changeToAtom(o) ); }
   ")"
                       { if (dfp != null) { // && dfp.isRelevant(r.getPredicateIndicator())) {
                            return lFac.createNPLLiteral(r,dfp);
                         } else {
                            return r;
                         }
                       }
}



Literal literal() :
{ Token k; List l = null; Literal r; ListTerm lt; }
{
  ( k=<ATOM> | k=<FAIL> | k=<OBLIGATION> | k=<PERMISSION> | k=<PROHIBITION> )
                       { r = ASSyntax.createLiteral(k.image);
                         r.setSrcInfo(new SourceInfo(npSource, k.beginLine));
                         if (k.image.equals("true"))  r = Literal.LTrue;
                         if (k.image.equals("false")) r = Literal.LFalse;
                       }

  [
    "(" l = terms()    { r.setTerms(l); }
    ")"
  ]
  [
    lt = list()        { r.setAnnots(lt); }
  ]
                       {
                         if (r.getFunctor().indexOf(".") >= 0) {
                            try {
                               return new InternalActionLiteral((Structure)r, (Agent)null);
                            } catch (Exception e) {
                               e.printStackTrace();
                            }
                         } else if (dfp != null) { // && dfp.isRelevant(r.getPredicateIndicator())) {
                            return lFac.createNPLLiteral(r,dfp);
                         } else {
                            return r;
                         }
                       }
}

List terms() :    { ArrayList listTerms = new ArrayList(); Term v;  }
{
  v=term()             { listTerms.add(v); }
  ( "," v=term()       { listTerms.add(v); }
  )*
                       { listTerms.trimToSize();
                         return listTerms;
                       }
}

Term term() :          { Object o; }
{
  ( o=list()
  | o=log_expr()       // log_expr includes literals/atoms/structures
  )
                       { return changeToAtom(o); }
}


ListTermImpl list() :     { ListTermImpl lt = new ListTermImpl(); ListTerm last; Token K; Term f; }
{
  "["
  [
  f=term_in_list()        { last = lt.append(f); lt.setSrcInfo(f.getSrcInfo()); }
  ( "," f=term_in_list()  { last = last.append(f); }
  )*
  [ "|"  ( K=<VAR>        { last.setNext(new VarTerm(K.image)); }
         | K=<UNNAMEDVAR> { last.setNext(UnnamedVar.create(K.image)); }
         | f=list()       { last = last.concat((ListTerm)f); }
         )
  ]
  ]
  "]"                     { return lt; }
}
Term term_in_list() :     { Object o; }
{
  ( o=list()
  | o=arithm_expr()
  | o=string()
  )
                          { return changeToAtom(o); }
}



Object log_expr() :         { Object t1, t2; }
{
   t1 = log_expr_trm()
   [  "|" t2 = log_expr()   { return new LogExpr((LogicalFormula)t1,LogicalOp.or,(LogicalFormula)t2); } ]
                            { return t1; }
}

Object log_expr_trm() :     { Object t1, t2; }
{
   t1 = log_expr_factor()
[  "&" t2 = log_expr_trm()  { return new LogExpr((LogicalFormula)t1,LogicalOp.and,(LogicalFormula)t2); } ]
                            { return t1; }
}

Object log_expr_factor():
                                    { Object t; }
{
(
  <TK_NOT> t = log_expr_factor()    { return new LogExpr(LogicalOp.not,(LogicalFormula)t); }
 |
  t = rel_expr()                    { return t; }
)
}


Object rel_expr() :
                                          {  Object op1 = null;
                                             Object op2 = null;
                                             RelationalOp operator = RelationalOp.none;
                                           }
{
    (   op1 = arithm_expr()
      | op1 = string()
    )

    [
       ( "<"                               { operator = RelationalOp.lt; }
       | "<="                              { operator = RelationalOp.lte; }
       | ">"                               { operator = RelationalOp.gt; }
       | ">="                              { operator = RelationalOp.gte; }
       | "=="                              { operator = RelationalOp.eq; }
       | "\\=="                            { operator = RelationalOp.dif; }
       | "="                               { operator = RelationalOp.unify; }
       | "=.."                             { operator = RelationalOp.literalBuilder; }
       )

       (   op2 = arithm_expr()
         | op2 = string()
         | op2 = list()
       )

                                           { if ( ((Term)op1).isInternalAction() && operator != RelationalOp.literalBuilder)
                                                throw new ParseException(getSourceRef(op1)+" RelExpr: operand '"+op1+"' can not be an internal action.");
                                             if ( ((Term)op2).isInternalAction() && operator != RelationalOp.literalBuilder)
                                                throw new ParseException(getSourceRef(op2)+" RelExpr: operand '"+op2+"' can not be an internal action.");
                                             return new RelExpr((Term)op1, operator, (Term)op2);
                                           }
    ]
                                           { return op1; }
}


Object arithm_expr() :        { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_trm()     { op = ArithmeticOp.none; }
[  ( "+"                      { op = ArithmeticOp.plus;}
   | "-"                      { op = ArithmeticOp.minus;}
   )
   t2 = arithm_expr()         { if (!(t1 instanceof NumberTerm)) {
                                   throw new ParseException(getSourceRef(t1)+" ArithExpr: first operand '"+t1+"' is not numeric or variable.");
                                }
                                if (!(t2 instanceof NumberTerm)) {
                                   throw new ParseException(getSourceRef(t2)+" ArithExpr: second operand '"+t2+"' is not numeric or variable.");
                                }
                                return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);
                              }
]                             { return t1; }
}

Object arithm_expr_trm() :      { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_factor()    { op = ArithmeticOp.none; }
[  ( "*"                        { op = ArithmeticOp.times; }
   | "/"                        { op = ArithmeticOp.div; }
   | <TK_INTDIV>                { op = ArithmeticOp.intdiv; }
   | <TK_INTMOD>                { op = ArithmeticOp.mod; }
   )
   t2 = arithm_expr_trm()       { if (!(t1 instanceof NumberTerm)) {
                                    throw new ParseException(getSourceRef(t1)+" ArithTerm: first operand '"+t1+"' is not numeric or variable.");
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    throw new ParseException(getSourceRef(t2)+" ArithTerm: second operand '"+t2+"' is not numeric or variable.");
                                  }
                                  return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);
                                }
]                               { return t1; }
}

Object arithm_expr_factor():
                                { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_simple()    { op = ArithmeticOp.none; }
[  ( "**"                       { op = ArithmeticOp.pow; }
   )
   t2 = arithm_expr_factor()    { if (!(t1 instanceof NumberTerm)) {
                                    throw new ParseException(getSourceRef(t1)+" ArithFactor: first operand '"+t1+"' is not numeric or variable.");
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    throw new ParseException(getSourceRef(t2)+" ArithFactor: second operand '"+t2+"' is not numeric or variable.");
                                  }
                                  return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);
                                }
]                               { return t1; }
}


Object arithm_expr_simple():
                                { Token K; Object t; VarTerm v; }
{
 ( K = <NUMBER>                 { NumberTerm ni = ASSyntax.parseNumber(K.image);
                                  ni.setSrcInfo(new SourceInfo(npSource, K.beginLine));
                                  return ni;
                                }
 | "-" t = arithm_expr_simple() { if (!(t instanceof NumberTerm)) {
                                    throw new ParseException(getSourceRef(t)+" The argument '"+t+"' of operator '-' is not numeric or variable.");
                                  }
                                  return new ArithExpr(ArithmeticOp.minus, (NumberTerm)t);
                                }
 | "(" t = log_expr() ")"       { return t; }
 | v = var()                    { return v; }
 | t = literal()                { return t; }
 | t = time()                   { return t; }
 )
}

VarTerm var():      { Token K; VarTerm v; ListTerm lt; }
{
 ( K = <VAR>        { v = new VarTerm(K.image); v.setSrcInfo(new SourceInfo(npSource, K.beginLine));}
 | K = <UNNAMEDVAR> { v = UnnamedVar.create(K.image); }
 )
 [
   lt = list()      { v.setAnnots(lt); }
 ]
                    { return v; }
}

StringTerm string():{ Token k; StringTermImpl s; }
{
  k = <STRING>      { s = new StringTermImpl(k.image.substring(1,k.image.length()-1));
                      s.setSrcInfo(new SourceInfo(npSource,k.beginLine));
                      return s;
                    }
}

Term time():        { Token k; long t = -1; String u = null; }
{
  "`"
  [ k = <NUMBER>    { t = Long.parseLong(k.image); }
  ]
  [ k = <ATOM>      { u = k.image; }
  ]
  "`"
                    { //if (u == null && t != 0)
                      //   throw new ParseException("no time unit can be used only with 0");
                      if (t == -1 && !u.equals("now") && !u.equals("never"))
                         throw new ParseException("only 'now' and 'never' cannot have a number after @");
                      return new TimeTerm(t,u);
                    }
}

